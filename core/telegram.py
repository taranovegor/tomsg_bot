import logging
from abc import ABC, abstractmethod

import validators
from telegram import (
    InlineQueryResult,
    InlineQueryResultArticle,
    InputTextMessageContent,
    LinkPreviewOptions,
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from core.parser import Entity, NoParserFound, Parser, Text


class ErrFactoryNotFound(Exception):
    pass


class ResultFactory(ABC):
    @abstractmethod
    def create(self, e: Entity) -> InlineQueryResult:
        pass


class DelegatingResultFactory(ResultFactory):
    def __init__(self, factories: dict[str, ResultFactory]):
        self.factories = factories

    def create(self, e: Entity) -> InlineQueryResult:
        if e.type() not in self.factories:
            raise ErrFactoryNotFound
        return self.factories[e.type()].create(e)


class TextFactory(ResultFactory):
    def create(self, e: Text) -> InlineQueryResult:
        msg = 'üíÅ' if e.author else ''
        if e.author.url == '':
            msg += e.author.text
        elif e.author.text == '':
            msg += f'<a href="{e.author.url}">{e.author.url}</a>'
        else:
            msg += f'<a href="{e.author.url}">{e.author.text}</a>'
        msg += ', '
        msg += e.created_at.strftime('%d.%m.%y %H:%M %Z')
        msg += '\n'
        msg += e.content
        msg += '\n\n'
        if len(e.metrics) > 0:
            msg += ' '.join(e.metrics)
            msg += '\n\n'
        msg += 'üìÑ'
        if e.backlink.text == '':
            msg += f'<a href="{e.backlink.url}">{e.backlink.url}</a>'
        else:
            msg += f'<a href="{e.backlink.url}">{e.backlink.text}</a>'

        return InlineQueryResultArticle(
            id=e.type(),
            title='‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            description=e.content,
            input_message_content=InputTextMessageContent(
                message_text=msg,
                parse_mode=ParseMode.HTML,
                link_preview_options=LinkPreviewOptions(
                    is_disabled=True,
                ),
            ),
        )


def error_result(identifier: str, title: str, description: str, query: str) -> InlineQueryResultArticle:
    return InlineQueryResultArticle(
        id=f'e_{identifier}',
        title=title,
        description=description,
        input_message_content=InputTextMessageContent(
            message_text=f'{query}\n\n‚ùóÔ∏è–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.',
        ),
    )


class Handler:
    def __init__(self, parser: Parser, result_factory: ResultFactory):
        self.parser = parser
        self.result_factory = result_factory

    async def inline_query(self, update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.inline_query.query

        if not query:
            return

        if validators.url(query):
            try:
                entity = self.parser.parse(query)
                result = self.result_factory.create(entity)
            except NoParserFound:
                result = error_result(
                    'no_parser_found',
                    'üîó –°—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
                    '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Å—ã–ª–∫–∞ —Å —ç—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –µ—â–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.',
                    query,
                )
            except Exception as e:
                logging.error('An exception occurred: %s', e)
                result = error_result(
                    'exception',
                    '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.',
                    query,
                )
        else:
            result = error_result(
                'invalid_url',
                '‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å',
                '–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.',
                query,
            )

        await update.inline_query.answer(results=[result], cache_time=1)
